// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var React          = require("react");
var Config         = require("../Config.js");
var Helmet         = require("../bindings/gatsby/helmet.js");
var Control        = require("../components/helpers/Control.js");
var Graphql        = require("../utils/Graphql.js");
var Helpers        = require("../utils/Helpers.js");
var ReasonReact    = require("reason-react/src/ReasonReact.js");
var PackageSummary = require("../components/PackageSummary.js");

var component = ReasonReact.statelessComponent("Package");

function make(data, pathContext, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Helmet.make(/* Some */[Config.titleTemplate(pathContext.keyword + " (keyword)")], /* None */0, /* None */0, /* None */0, /* array */[])), React.createElement("h1", undefined, Helpers.text(pathContext.keyword)), ReasonReact.element(/* None */0, /* None */0, Control.$$Map[/* make */1](Graphql.getNodes(data.packages), /* None */0, (function ($$package) {
                            return ReasonReact.element(/* Some */[$$package.id], /* None */0, PackageSummary.make($$package, /* array */[]));
                          }))));
    });
  return newrecord;
}

var $$default = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.data, jsProps.pathContext, /* array */[]);
      }));


  export const query = graphql`
    query KeywordQuery($keyword: String!) {
      packages: allPackages(filter: { keywords: { in: [$keyword] }}) {
        edges {
          node {
            type
            id
            name
            version
            description
            keywords
            license
            updated
            stars
            score
            quality
            popularity
            maintenance
            slug
          }
        }
      }
    }
  `

;

exports.component = component;
exports.make      = make;
exports.$$default = $$default;
exports.default   = $$default;
exports.__esModule= true;
/* component Not a pure module */
