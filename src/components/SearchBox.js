// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Icon                = require("../vendor/icons/Icon.js");
var $$Array             = require("bs-platform/lib/js/array.js");
var Block               = require("bs-platform/lib/js/block.js");
var Curry               = require("bs-platform/lib/js/curry.js");
var React               = require("react");
var ReasonReact         = require("reason-react/src/ReasonReact.js");
var GatsbyLink          = require("gatsby-link");
var Algoliasearch       = require("algoliasearch");
var SearchBoxStyles     = require("./SearchBoxStyles.js");
var SearchResultItem    = require("./SearchResultItem.js");
var AlgoliasearchHelper = require("algoliasearch-helper");

var appId = "B1AVN0IGTU";

var apiKey = "c7a3475a8567971cb7510b422d9f37ad";

var index = "re:libs";

function decodeResult(json) {
  return Object.assign({
              slug: "/packages/" + json.id
            }, json);
}

var component = ReasonReact.reducerComponent("PackageSearchBox");

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (param) {
      var reduce = param[/* reduce */1];
      param[/* state */2][/* searchClient */0].on("result", (function (results, _) {
              return Curry._2(reduce, (function () {
                            return /* ResultsChanged */Block.__(1, [results.hits]);
                          }), /* () */0);
            }));
      return /* NoUpdate */0;
    });
  newrecord[/* render */9] = (function (param) {
      var state = param[/* state */2];
      var reduce = param[/* reduce */1];
      var match = state[/* results */2].length;
      return React.createElement("div", {
                  className: SearchBoxStyles.root
                }, React.createElement("div", {
                      className: SearchBoxStyles.fakeInput
                    }, ReasonReact.element(/* None */0, /* None */0, Icon.Search[/* make */0](/* Some */[SearchBoxStyles.searchIcon], /* array */[])), React.createElement("input", {
                          className: SearchBoxStyles.input,
                          placeholder: "Search packages",
                          value: state[/* query */1],
                          onChange: Curry._1(reduce, (function (e) {
                                  return /* QueryChanged */Block.__(0, [e.target.value]);
                                }))
                        })), match !== 0 ? React.createElement("div", {
                        className: SearchBoxStyles.results
                      }, $$Array.map((function ($$package) {
                              return ReasonReact.element(/* Some */[$$package.name], /* None */0, SearchResultItem.make($$package, Curry._1(reduce, (function (p) {
                                                    return /* SelectItem */Block.__(2, [p]);
                                                  })), /* array */[]));
                            }), $$Array.map(decodeResult, state[/* results */2]))) : null);
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* searchClient */AlgoliasearchHelper(Algoliasearch(appId, apiKey), index),
              /* query */"",
              /* results : array */[]
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      switch (action.tag | 0) {
        case 0 : 
            var query = action[0];
            if (query === "") {
              return /* Update */Block.__(0, [/* record */[
                          /* searchClient */state[/* searchClient */0],
                          /* query */query,
                          /* results : array */[]
                        ]]);
            } else {
              return /* UpdateWithSideEffects */Block.__(3, [
                        /* record */[
                          /* searchClient */state[/* searchClient */0],
                          /* query */query,
                          /* results */state[/* results */2]
                        ],
                        (function (param) {
                            param[/* state */2][/* searchClient */0].setQuery(query).search();
                            return /* () */0;
                          })
                      ]);
            }
            break;
        case 1 : 
            return /* Update */Block.__(0, [/* record */[
                        /* searchClient */state[/* searchClient */0],
                        /* query */state[/* query */1],
                        /* results */action[0]
                      ]]);
        case 2 : 
            var $$package = action[0];
            return /* UpdateWithSideEffects */Block.__(3, [
                      /* record */[
                        /* searchClient */state[/* searchClient */0],
                        /* query */"",
                        /* results : array */[]
                      ],
                      (function () {
                          GatsbyLink.navigateTo($$package.slug);
                          return /* () */0;
                        })
                    ]);
        
      }
    });
  return newrecord;
}

var $$default = ReasonReact.wrapReasonForJs(component, (function () {
        return make(/* array */[]);
      }));

var Styles = 0;

exports.Styles       = Styles;
exports.appId        = appId;
exports.apiKey       = apiKey;
exports.index        = index;
exports.decodeResult = decodeResult;
exports.component    = component;
exports.make         = make;
exports.$$default    = $$default;
exports.default      = $$default;
exports.__esModule   = true;
/* component Not a pure module */
