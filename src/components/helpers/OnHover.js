// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Rebase      = require("@glennsl/rebase/src/Rebase.bs.js");
var ReactDom    = require("react-dom");
var RefCatcher  = require("./RefCatcher.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function attachEventHandlers(r, setHover) {
  var el = ReactDom.findDOMNode(r);
  el.addEventListener("mouseenter", (function () {
          return Curry._1(setHover, /* true */1);
        }));
  el.addEventListener("mouseleave", (function () {
          return Curry._1(setHover, /* false */0);
        }));
  return /* () */0;
}

var component = ReasonReact.reducerComponent("OnHover");

function make(render) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var isHovered = param[/* state */2];
      var reduce = param[/* reduce */1];
      return ReasonReact.element(/* None */0, /* None */0, RefCatcher.make((function (r) {
                        return Rebase.Option[/* forEach */8]((function (r) {
                                      return attachEventHandlers(r, Curry._1(reduce, (function (v) {
                                                        return v;
                                                      })));
                                    }), r);
                      }), (function () {
                        return Curry._1(render, isHovered);
                      })));
    });
  newrecord[/* initialState */10] = (function () {
      return /* false */0;
    });
  newrecord[/* reducer */12] = (function (isHovered, _) {
      return /* Update */Block.__(0, [isHovered]);
    });
  return newrecord;
}

exports.attachEventHandlers = attachEventHandlers;
exports.component           = component;
exports.make                = make;
/* component Not a pure module */
